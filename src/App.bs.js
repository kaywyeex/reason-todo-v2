// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE

import * as List from "../node_modules/bs-platform/lib/es6/list.js";
import * as Block from "../node_modules/bs-platform/lib/es6/block.js";
import * as Curry from "../node_modules/bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Moment from "moment";
import * as Pervasives from "../node_modules/bs-platform/lib/es6/pervasives.js";
import * as Caml_format from "../node_modules/bs-platform/lib/es6/caml_format.js";
import * as ReasonReact from "../node_modules/reason-react/src/ReasonReact.js";
import * as Input$ReactTemplate from "./components/Input/Input.bs.js";
import * as Items$ReactTemplate from "./components/Items/Items.bs.js";

((require("./App.css")));

var prevId = ["0"];

function newItem(text) {
  prevId[0] = Pervasives.string_of_int(Caml_format.caml_int_of_string(prevId[0]) + 1 | 0);
  var created = Moment().format("h:mm");
  return /* record */[
          /* id */prevId[0],
          /* text */text,
          /* completed : false */0,
          /* created */created
        ];
}

var component = ReasonReact.reducerComponent("App");

function make() {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (param) {
      var send = param[/* send */4];
      return React.createElement("div", undefined, React.createElement("div", {
                      className: "header"
                    }), React.createElement("div", {
                      className: "input-container"
                    }, ReasonReact.element(/* None */0, /* None */0, Input$ReactTemplate.Input[/* make */1]((function (text) {
                                return Curry._1(send, /* AddItem */Block.__(0, [text]));
                              }), /* array */[]))), React.createElement("div", {
                      className: "container"
                    }, ReasonReact.element(/* None */0, /* None */0, Items$ReactTemplate.ItemList[/* make */1](param[/* state */2][/* items */0], (function (item, _) {
                                return Curry._1(send, /* DeleteItem */Block.__(1, [item[/* id */0]]));
                              }), (function (item, _) {
                                return Curry._1(send, /* CompleteItem */Block.__(2, [item[/* id */0]]));
                              }), /* array */[]))));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[/* items : [] */0];
    });
  newrecord[/* reducer */12] = (function (action, param) {
      var items = param[/* items */0];
      switch (action.tag | 0) {
        case 0 : 
            return /* Update */Block.__(0, [/* record */[/* items : :: */[
                          newItem(action[0]),
                          items
                        ]]]);
        case 1 : 
            var id = action[0];
            var remaining = List.filter((function (item) {
                      return +(item[/* id */0] !== id);
                    }))(items);
            return /* Update */Block.__(0, [/* record */[/* items */remaining]]);
        case 2 : 
            var id$1 = action[0];
            var newItems = List.map((function (item) {
                    var match = +(item[/* id */0] === id$1);
                    if (match !== 0) {
                      return /* record */[
                              /* id */item[/* id */0],
                              /* text */item[/* text */1],
                              /* completed */1 - item[/* completed */2],
                              /* created */item[/* created */3]
                            ];
                    } else {
                      return item;
                    }
                  }), items);
            return /* Update */Block.__(0, [/* record */[/* items */newItems]]);
        
      }
    });
  return newrecord;
}

export {
  prevId ,
  newItem ,
  component ,
  make ,
  
}
/*  Not a pure module */
